{"version":3,"file":"static/js/872.917dc9fb.chunk.js","mappings":"8LAUA,MAg3BA,EAh3BqB,CACjBA,KAAM,aACNC,QAAS,mvIAuETC,YAAa,uIACbC,YAAa,kBACbC,IAAK,2lPAoWLC,QAAS,CACLC,QAAQ,EACRC,UAAW,mBACXC,MAAO,GACPC,KAAM,CAAC,CACXC,MAAO,OACPR,YAAa,gDACbS,KAAM,s3BAkCNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,gBAAiB,gDACjBC,UAAW,GACb,CACEd,KAAM,eACNG,YAAa,qBACbW,UAAW,KAEb,CACEJ,MAAO,QACPR,YAAa,2BACbS,KAAM,6sDAsDNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,gBAAiB,gDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,GACb,CACEd,KAAM,eACNG,YAAa,qBACbW,UAAW,KAEb,CACEJ,MAAO,WACPR,YAAa,2BACbS,KAAM,qpCAqCNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,gBAAiB,gDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,GACb,CACEd,KAAM,eACNG,YAAa,qBACbW,UAAW,KAEb,CACEJ,MAAO,aACPR,YAAa,uCACbS,KAAM,4iDA2CNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,gBAAiB,gDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,GACb,CACEd,KAAM,eACNG,YAAa,qBACbW,UAAW,KAEb,CACEJ,MAAO,WACPR,YAAa,2BACbS,KAAM,y9CAqDNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,gBAAiB,gDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,GACb,CACEd,KAAM,eACNG,YAAa,qBACbW,UAAW,KAEb,CACEJ,MAAO,aACPR,YAAa,2BACbS,KAAM,4uCA+CNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,gBAAiB,gDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,GACb,CACEd,KAAM,eACNG,YAAa,qBACbW,UAAW,KAEb,CACEJ,MAAO,cACPR,YAAa,2BACbS,KAAM,0yDA2DNC,MAAO,CAAC,CACRZ,KAAM,aACNG,YAAa,8BACbU,gBAAiB,gDACjBC,UAAW,GACb,CACEd,KAAM,OACNG,YAAa,OACbW,UAAW,GACb,CACEd,KAAM,eACNG,YAAa,qBACbW,UAAW,O","sources":["../../README.md"],"sourcesContent":["import * as component_1 from '@kne/current-lib_react-file';\nimport '@kne/current-lib_react-file/dist/index.css';\nimport * as component_3 from '@kne/remote-loader';\nimport '@kne/current-lib_react-file/dist/index.css';\nimport * as component_5 from 'antd';\nimport '@kne/current-lib_react-file/dist/index.css';\nimport '@kne/current-lib_react-file/dist/index.css';\nimport '@kne/current-lib_react-file/dist/index.css';\nimport '@kne/current-lib_react-file/dist/index.css';\nimport '@kne/current-lib_react-file/dist/index.css';\nconst readmeConfig = {\n    name: `react-file`,\n    summary: `<p>这是一个功能丰富的React文件操作组件库，提供了文件上传、预览、下载等完整的文件处理解决方案。</p>\n<h3>主要特性</h3>\n<ul>\n<li>🚀 <strong>文件上传</strong> - 支持单文件和多文件上传，可自定义文件类型限制</li>\n<li>👀 <strong>文件预览</strong> - 支持多种文件格式的预览，包括：\n<ul>\n<li>图片（PNG, JPG, GIF等）</li>\n<li>音频文件</li>\n<li>视频文件</li>\n<li>PDF文档</li>\n<li>Office文档（Word, Excel, PowerPoint）</li>\n<li>HTML文件</li>\n<li>文本文件</li>\n</ul>\n</li>\n<li>📥 <strong>文件下载</strong> - 支持文件直接下载和blob数据下载</li>\n<li>📋 <strong>文件列表</strong> - 提供文件列表展示和管理功能</li>\n<li>🖼️ <strong>图片处理</strong> - 专门的图片组件，支持默认头像和加载失败处理</li>\n<li>🖨️ <strong>打印功能</strong> - 内置打印按钮组件</li>\n</ul>\n<h3>组件概览</h3>\n<h4>FileUpload</h4>\n<p>文件上传组件，支持单文件和多文件上传，可自定义接受的文件类型和上传限制。</p>\n<h4>FilePreview</h4>\n<p>文件预览组件，根据文件类型自动选择合适的预览方式。支持本地文件URL和OSS文件ID两种方式。</p>\n<h4>FileList</h4>\n<p>文件列表组件，用于展示和管理已上传的文件，支持预览、下载等操作。</p>\n<h4>Download</h4>\n<p>文件下载组件，支持多种下载方式，包括直接下载和blob数据下载。</p>\n<h4>Image</h4>\n<p>图片组件，支持默认头像、性别区分的头像显示，以及加载失败时的占位图。</p>\n<h4>FileButton</h4>\n<p>文件操作按钮组件，提供文件相关操作的统一交互界面。</p>\n<h4>PrintButton</h4>\n<p>打印按钮组件，用于触发打印功能。</p>\n<h3>快速开始</h3>\n<pre><code class=\"language-jsx\">import { FileUpload, FileList, FilePreview } from '@your-org/react-file-components';\n\n// 文件上传示例\nconst UploadExample = () =&gt; (\n  &lt;FileUpload\n    accept=\".jpg,.png,.pdf\"\n    multiple\n    onChange={files =&gt; console.log('Uploaded files:', files)}\n  /&gt;\n);\n\n// 文件预览示例\nconst PreviewExample = () =&gt; (\n  &lt;FilePreview\n    src=\"path/to/file.pdf\"\n    filename=\"example.pdf\"\n  /&gt;\n);\n\n// 文件列表示例\nconst ListExample = () =&gt; (\n  &lt;FileList\n    files={[\n      { id: '1', name: 'document.pdf', url: 'path/to/document.pdf' },\n      { id: '2', name: 'image.jpg', url: 'path/to/image.jpg' }\n    ]}\n    onDelete={id =&gt; console.log('Delete file:', id)}\n  /&gt;\n);\n</code></pre>\n<h2>注意事项</h2>\n<ol>\n<li>确保服务器端支持相应的文件上传和处理功能</li>\n<li>文件预览功能可能需要额外的依赖或服务器支持（如Office文档预览）</li>\n</ol>`,\n    description: `提供了文件上传，文件预览，文件批量管理等功能`,\n    packageName: `@kne/react-file`,\n    api: `<h3>FileUpload</h3>\n<p>文件上传组件，支持单文件和多文件上传。</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>accept</td>\n<td>string</td>\n<td>undefined</td>\n<td>接受的文件类型，如 \".jpg,.png,.pdf\"</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>boolean</td>\n<td>false</td>\n<td>是否支持多文件上传</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>function</td>\n<td>-</td>\n<td>文件选择后的回调函数，参数为选择的文件数组</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>boolean</td>\n<td>false</td>\n<td>是否禁用上传功能</td>\n</tr>\n<tr>\n<td>maxSize</td>\n<td>number</td>\n<td>-</td>\n<td>单个文件最大尺寸（字节）</td>\n</tr>\n<tr>\n<td>children</td>\n<td>ReactNode</td>\n<td>-</td>\n<td>自定义上传按钮内容</td>\n</tr>\n</tbody>\n</table>\n<h3>FilePreview</h3>\n<p>文件预览组件，支持多种文件格式的预览。</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>url</td>\n<td>string</td>\n<td>-</td>\n<td>文件URL</td>\n</tr>\n<tr>\n<td>filename</td>\n<td>string</td>\n<td>-</td>\n<td>文件名，用于确定文件类型</td>\n</tr>\n<tr>\n<td>type</td>\n<td>string</td>\n<td>-</td>\n<td>文件类型，可选，如不提供则根据文件名推断</td>\n</tr>\n<tr>\n<td>staticUrl</td>\n<td>string</td>\n<td>-</td>\n<td>静态资源URL前缀</td>\n</tr>\n<tr>\n<td>apis</td>\n<td>object</td>\n<td>-</td>\n<td>API配置对象</td>\n</tr>\n</tbody>\n</table>\n<h3>FileList</h3>\n<p>文件列表组件，用于展示和管理文件。</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>files</td>\n<td>array</td>\n<td>[]</td>\n<td>文件列表数据</td>\n</tr>\n<tr>\n<td>onDelete</td>\n<td>function</td>\n<td>-</td>\n<td>删除文件的回调函数</td>\n</tr>\n<tr>\n<td>onPreview</td>\n<td>function</td>\n<td>-</td>\n<td>预览文件的回调函数</td>\n</tr>\n<tr>\n<td>onDownload</td>\n<td>function</td>\n<td>-</td>\n<td>下载文件的回调函数</td>\n</tr>\n<tr>\n<td>renderItem</td>\n<td>function</td>\n<td>-</td>\n<td>自定义渲染文件项的函数</td>\n</tr>\n</tbody>\n</table>\n<h3>Download</h3>\n<p>文件下载组件。</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>url</td>\n<td>string</td>\n<td>-</td>\n<td>下载文件的URL</td>\n</tr>\n<tr>\n<td>filename</td>\n<td>string</td>\n<td>-</td>\n<td>下载后的文件名</td>\n</tr>\n<tr>\n<td>children</td>\n<td>ReactNode</td>\n<td>-</td>\n<td>触发下载的元素</td>\n</tr>\n<tr>\n<td>onSuccess</td>\n<td>function</td>\n<td>-</td>\n<td>下载成功的回调函数</td>\n</tr>\n<tr>\n<td>onError</td>\n<td>function</td>\n<td>-</td>\n<td>下载失败的回调函数</td>\n</tr>\n</tbody>\n</table>\n<h3>Image</h3>\n<p>图片组件，支持默认头像和加载失败处理。</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>src</td>\n<td>string</td>\n<td>-</td>\n<td>图片源URL</td>\n</tr>\n<tr>\n<td>alt</td>\n<td>string</td>\n<td>-</td>\n<td>图片替代文本</td>\n</tr>\n<tr>\n<td>defaultAvatar</td>\n<td>string</td>\n<td>-</td>\n<td>默认头像类型（'male'/'female'/'default'）</td>\n</tr>\n<tr>\n<td>onError</td>\n<td>function</td>\n<td>-</td>\n<td>图片加载失败的回调函数</td>\n</tr>\n<tr>\n<td>className</td>\n<td>string</td>\n<td>-</td>\n<td>自定义类名</td>\n</tr>\n<tr>\n<td>style</td>\n<td>object</td>\n<td>-</td>\n<td>自定义样式</td>\n</tr>\n</tbody>\n</table>\n<h3>FileButton</h3>\n<p>文件操作按钮组件。</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onClick</td>\n<td>function</td>\n<td>-</td>\n<td>点击按钮的回调函数</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>boolean</td>\n<td>false</td>\n<td>是否禁用按钮</td>\n</tr>\n<tr>\n<td>children</td>\n<td>ReactNode</td>\n<td>-</td>\n<td>按钮内容</td>\n</tr>\n<tr>\n<td>className</td>\n<td>string</td>\n<td>-</td>\n<td>自定义类名</td>\n</tr>\n</tbody>\n</table>\n<h3>PrintButton</h3>\n<p>打印按钮组件。</p>\n<h4>属性</h4>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onBeforePrint</td>\n<td>function</td>\n<td>-</td>\n<td>打印前的回调函数</td>\n</tr>\n<tr>\n<td>onAfterPrint</td>\n<td>function</td>\n<td>-</td>\n<td>打印后的回调函数</td>\n</tr>\n<tr>\n<td>children</td>\n<td>ReactNode</td>\n<td>-</td>\n<td>按钮内容</td>\n</tr>\n</tbody>\n</table>\n<h3>类型定义</h3>\n<h4>FileType</h4>\n<pre><code class=\"language-typescript\">interface FileType {\n  id: string;\n  name: string;\n  url?: string;\n  size?: number;\n  type?: string;\n  lastModified?: number;\n}\n</code></pre>\n<h4>APIConfig</h4>\n<pre><code class=\"language-typescript\">interface APIConfig {\n  file?: {\n    staticUrl?: string;\n    upload?: string;\n    download?: string;\n  };\n}\n</code></pre>\n<h3>Hooks</h3>\n<h4>useFileUpload</h4>\n<p>用于处理文件上传逻辑的自定义Hook。</p>\n<pre><code class=\"language-typescript\">const {\n  uploadFile,\n  isUploading,\n  progress,\n  error\n} = useFileUpload(config);\n</code></pre>\n<h4>useDownload</h4>\n<p>用于处理文件下载逻辑的自定义Hook。</p>\n<pre><code class=\"language-typescript\">const {\n  download,\n  isDownloading,\n  error\n} = useDownload(config);\n</code></pre>\n<h3>工具函数</h3>\n<h4>computedAccept</h4>\n<p>计算接受的文件类型。</p>\n<pre><code class=\"language-typescript\">computedAccept(accept:string | string[]):string\n</code></pre>\n<h4>typeFormatComponent</h4>\n<p>根据文件名获取对应的预览组件。</p>\n<pre><code class=\"language-typescript\">typeFormatComponent(filename:string):React.ComponentType\n</code></pre>`,\n    example: {\n        isFull: true,\n        className: `react_file_b1237`,\n        style: ``,\n        list: [{\n    title: `File`,\n    description: `从oss获取文件地址`,\n    code: `const { default: File } = _ReactFile;\nconst { createWithRemoteLoader, getPublicPath } = remoteLoader;\n\nconst BaseExample = createWithRemoteLoader({\n  modules: ['components-core:Global@PureGlobal']\n})(({ remoteModules }) => {\n  const [PureGlobal] = remoteModules;\n  return <PureGlobal preset={{\n    ajax: async api => {\n      return { data: { code: 0, data: api.loader() } };\n    }, apis: {\n      file: {\n        staticUrl: getPublicPath('react-file') || window.PUBLIC_URL,\n        getUrl: {\n          loader: async ({ params }) => {\n            return new Promise(resolve => {\n              setTimeout(() => {\n                resolve('/logo192.png');\n              }, 1000);\n            });\n          }\n        }\n      }\n    }\n  }}>\n    <File id=\"123\">{({ url }) => {\n      return url;\n    }}</File>\n  </PureGlobal>;\n});\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactFile\",\n    packageName: \"@kne/current-lib_react-file\",\n    importStatement: \"import * as _ReactFile from \\\"@kne/react-file\\\"\",\n    component: component_1\n},{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_3\n}]\n},{\n    title: `Image`,\n    description: `显示图片`,\n    code: `const { Image } = _ReactFile;\nconst { createWithRemoteLoader, getPublicPath } = remoteLoader;\nconst { Divider } = antd;\n\nconst BaseExample = createWithRemoteLoader({\n  modules: ['components-core:Global@PureGlobal', 'components-core:InfoPage']\n})(({ remoteModules }) => {\n  const [PureGlobal, InfoPage] = remoteModules;\n  return <PureGlobal preset={{\n    ajax: async api => {\n      return { data: { code: 0, data: api.loader() } };\n    }, apis: {\n      file: {\n        staticUrl: getPublicPath('react-file') || window.PUBLIC_URL,\n        getUrl: {\n          loader: async ({ params }) => {\n            return new Promise(resolve => {\n              setTimeout(() => {\n                resolve('/mock/avatar.png');\n              }, 2000);\n            });\n          }\n        }\n      }\n    }\n  }}>\n    <InfoPage>\n      <InfoPage.Part title=\"图片\">\n        <Image src=\"xxxxxx\" />\n        <Image id=\"xxxxxx\" style={{ width: 200, height: 200 }} />\n      </InfoPage.Part>\n      <InfoPage.Part title=\"头像\">\n        <Image.Avatar gender=\"F\" />\n        <Image.Avatar gender=\"M\" />\n        <Image.Avatar />\n        <Image.Avatar gender=\"F\" id=\"xxxxxx\" />\n        <Divider />\n        <Image.Avatar gender=\"F\" shape=\"square\" />\n        <Image.Avatar gender=\"M\" shape=\"square\" />\n        <Image.Avatar shape=\"square\" />\n        <Image.Avatar gender=\"F\" id=\"xxxxxx\" shape=\"square\" />\n        <Divider />\n        <Image.Avatar gender=\"F\" size={30} />\n        <Image.Avatar gender=\"M\" size={50} />\n        <Image.Avatar size={80} />\n        <Image.Avatar gender=\"F\" id=\"xxxxxx\" size={100} />\n      </InfoPage.Part>\n    </InfoPage>\n  </PureGlobal>;\n});\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactFile\",\n    packageName: \"@kne/current-lib_react-file\",\n    importStatement: \"import * as _ReactFile from \\\"@kne/react-file\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_5\n},{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_3\n}]\n},{\n    title: `Download`,\n    description: `文件下载`,\n    code: `const { Download } = _ReactFile;\nconst { createWithRemoteLoader, getPublicPath } = remoteLoader;\nconst { Flex } = antd;\n\nconst BaseExample = createWithRemoteLoader({\n  modules: ['components-core:Global@PureGlobal']\n})(({ remoteModules }) => {\n  const [PureGlobal] = remoteModules;\n  return <PureGlobal preset={{\n    ajax: async api => {\n      return { data: { code: 0, data: api.loader() } };\n    }, apis: {\n      file: {\n        staticUrl: getPublicPath('react-file') || window.PUBLIC_URL,\n        getUrl: {\n          loader: async ({ params }) => {\n            return new Promise(resolve => {\n              setTimeout(() => {\n                resolve('/logo192.png');\n              }, 1000);\n            });\n          }\n        }\n      }\n    }\n  }}>\n    <Flex gap={8}>\n      <Download id=\"123\">下载文件</Download>\n      <Download id=\"123\" filename=\"图片\">下载文件并设置名称</Download>\n      <Download src=\"/logo192.png\" filename=\"图片\">直接通过src链接下载</Download>\n    </Flex>\n  </PureGlobal>;\n});\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactFile\",\n    packageName: \"@kne/current-lib_react-file\",\n    importStatement: \"import * as _ReactFile from \\\"@kne/react-file\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_5\n},{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_3\n}]\n},{\n    title: `FileButton`,\n    description: `预览文件按钮`,\n    code: `const { FileButton } = _ReactFile;\nconst { createWithRemoteLoader, getPublicPath } = remoteLoader;\n\nconst BaseExample = createWithRemoteLoader({\n  modules: ['components-core:Global@PureGlobal']\n})(({ remoteModules }) => {\n  const [PureGlobal] = remoteModules;\n  return <PureGlobal preset={{\n    ajax: async api => {\n      return { data: { code: 0, data: api.loader() } };\n    }, apis: {\n      file: {\n        staticUrl: getPublicPath('react-file') || window.PUBLIC_URL,\n        getUrl: {\n          loader: async ({ params }) => {\n            const urlMap = {\n              1: '/mock/resume.png',\n              2: '/mock/resume.pdf',\n              3: '/mock/resume.html',\n              4: '/mock/resume.txt',\n              5: '/mock/audio.wav',\n              6: '/mock/resume.docx'\n            };\n            return new Promise(resolve => {\n              setTimeout(() => {\n                resolve(urlMap[params.id]);\n              }, 1000);\n            });\n          }\n        }\n      }\n    }\n  }}>\n    <FileButton id=\"1\" filename=\"demo.jpg\" openPrint modalProps={{ width: 800 }}>预览demo.jpg</FileButton>\n    <FileButton id=\"2\" filename=\"demo2.pdf\" openPrint modalProps={{ width: 800 }}>预览demo2.pdf</FileButton>\n    <FileButton id=\"3\" filename=\"demo2.html\" openPrint modalProps={{ width: 800 }}>预览demo2.html</FileButton>\n    <FileButton id=\"6\" filename=\"resume.docx\" openPrint modalProps={{ width: 800 }} type=\"link\">resume.docx</FileButton>\n  </PureGlobal>;\n});\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactFile\",\n    packageName: \"@kne/current-lib_react-file\",\n    importStatement: \"import * as _ReactFile from \\\"@kne/react-file\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_5\n},{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_3\n}]\n},{\n    title: `FileList`,\n    description: `文件列表`,\n    code: `const { FileList } = _ReactFile;\nconst { createWithRemoteLoader, getPublicPath } = remoteLoader;\nconst { Divider } = antd;\n\nconst BaseExample = createWithRemoteLoader({\n  modules: ['components-core:Global@PureGlobal']\n})(({ remoteModules }) => {\n  const [PureGlobal] = remoteModules;\n  return <PureGlobal preset={{\n    ajax: async api => {\n      return { data: { code: 0, data: api.loader() } };\n    }, apis: {\n      file: {\n        staticUrl: getPublicPath('react-file') || window.PUBLIC_URL,\n        getUrl: {\n          loader: async ({ params }) => {\n            const urlMap = {\n              1: '/mock/resume.png',\n              2: '/mock/resume.pdf',\n              3: '/mock/resume.html',\n              4: '/mock/resume.txt',\n              5: '/mock/audio.wav',\n              6: '/mock/resume.docx'\n            };\n            return new Promise(resolve => {\n              setTimeout(() => {\n                resolve(urlMap[params.id]);\n              }, 1000);\n            });\n          }\n        }\n      }\n    }\n  }}>\n    <FileList dataSource={[{\n      uuid: '121233',\n      type: 'uploading',\n      filename: '张三的简历.doc'\n    },\n      {\n        id: '2',\n        filename: '我是一份简历.pdf',\n        date: '2022-07-15T11:09:15.000+08:00',\n        userName: '用户名'\n      }]} />\n    <Divider />\n    <FileList dataSource={[]} />\n  </PureGlobal>;\n});\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactFile\",\n    packageName: \"@kne/current-lib_react-file\",\n    importStatement: \"import * as _ReactFile from \\\"@kne/react-file\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_5\n},{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_3\n}]\n},{\n    title: `FileUpload`,\n    description: `文件上传`,\n    code: `const { FileUpload } = _ReactFile;\nconst { createWithRemoteLoader, getPublicPath } = remoteLoader;\n\nconst urls = {};\n\nconst BaseExample = createWithRemoteLoader({\n  modules: ['components-core:Global@PureGlobal']\n})(({ remoteModules }) => {\n  const [PureGlobal] = remoteModules;\n  return <PureGlobal preset={{\n    ajax: async api => {\n      return { data: { code: 0, data: api.loader() } };\n    }, apis: {\n      file: {\n        staticUrl: getPublicPath('react-file') || window.PUBLIC_URL,\n        getUrl: {\n          loader: async ({ params }) => {\n            return new Promise(resolve => {\n              setTimeout(() => {\n                resolve(urls[params.id]);\n              }, 1000);\n            });\n          }\n        }, upload: ({ file }) => {\n          urls[file.name] = URL.createObjectURL(file);\n          return new Promise((resolve) => {\n            setTimeout(() => {\n              resolve({\n                data: {\n                  code: 0, data: {\n                    id: file.name, filename: file.name\n                  }\n                }\n              });\n            }, 1000);\n          });\n        }\n      }\n    }\n  }}>\n    <FileUpload />\n  </PureGlobal>;\n});\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactFile\",\n    packageName: \"@kne/current-lib_react-file\",\n    importStatement: \"import * as _ReactFile from \\\"@kne/react-file\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_5\n},{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_3\n}]\n},{\n    title: `FilePreview`,\n    description: `文件预览`,\n    code: `const { FilePreview } = _ReactFile;\nconst { createWithRemoteLoader, getPublicPath } = remoteLoader;\n\nconst BaseExample = createWithRemoteLoader({\n  modules: ['components-core:Global@PureGlobal', 'components-core:InfoPage']\n})(({ remoteModules }) => {\n  const [PureGlobal, InfoPage] = remoteModules;\n  return <PureGlobal preset={{\n    ajax: async api => {\n      return { data: { code: 0, data: api.loader() } };\n    }, apis: {\n      file: {\n        staticUrl: getPublicPath('react-file') || window.PUBLIC_URL, getUrl: {\n          loader: async ({ params }) => {\n            const urlMap = {\n              1: '/mock/resume.png',\n              2: '/mock/resume.pdf',\n              3: '/mock/resume.html',\n              4: '/mock/resume.txt',\n              5: '/mock/audio.wav',\n              6: 'http://ieee802.org:80/secmail/docIZSEwEqHFr.doc'\n            };\n            return new Promise(resolve => {\n              setTimeout(() => {\n                resolve(urlMap[params.id]);\n              }, 1000);\n            });\n          }\n        }\n      }\n    }\n  }}>\n    <InfoPage>\n      <InfoPage.Part title=\"预览图片\">\n        <FilePreview id=\"1\" />\n      </InfoPage.Part>\n      <InfoPage.Part title=\"预览PDF\">\n        <FilePreview id=\"2\" />\n      </InfoPage.Part>\n      <InfoPage.Part title=\"预览HTML\">\n        <FilePreview id=\"3\" />\n      </InfoPage.Part>\n      <InfoPage.Part title=\"预览TXT\">\n        <FilePreview id=\"4\" />\n      </InfoPage.Part>\n      <InfoPage.Part title=\"预览AUDIO\">\n        <FilePreview id=\"5\" />\n      </InfoPage.Part>\n      <InfoPage.Part title=\"预览OFFICE\">\n        <FilePreview id=\"6\" />\n      </InfoPage.Part>\n    </InfoPage>\n\n  </PureGlobal>;\n});\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactFile\",\n    packageName: \"@kne/current-lib_react-file\",\n    importStatement: \"import * as _ReactFile from \\\"@kne/react-file\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_5\n},{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_3\n}]\n}]\n    }\n};\nexport default readmeConfig;\n"],"names":["name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","importStatement","component"],"sourceRoot":""}